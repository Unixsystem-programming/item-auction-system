/*硫��곗벐�덈뱶 湲곕컲 �쒕쾭�� �묒냽�섎뒗 �대씪�댁뼵�� �꾨줈洹몃옩*/
/*�쒖꽌 �숆린�� �댁빞��*/
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <pthread.h>
#include<stdio.h>

#define PORTNUM 8881//mh
#define NAME_SIZE 20
#define BUF_SIZE 256

void *send_msg(void* arg);
void *recv_msg(void* arg);
void error_handling(char* msg);

pthread_mutex_t rw_mutex;
pthread_cond_t rw_threadshold_cv;

int main(int argc, char* argv[])
{
  int sock;
  struct sockaddr_in serv_addr; //�쒕쾭二쇱냼�뺣낫 �댁쓣蹂���
  pthread_attr_t attr;
  pthread_t snd_thread, rcv_thread; //�곕젅�� 2媛� �좎뼵:1-蹂대궪��, 2-諛쏆쓣 ��
  void * thread_return;
  pthread_attr_init(&attr);
  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
  pthread_mutex_init(&rw_mutex,NULL);
  pthread_cond_init(&rw_threadshold_cv,NULL);

  sock=socket(PF_INET, SOCK_STREAM,0);

  memset(&serv_addr,0,sizeof(serv_addr));
  serv_addr.sin_family=AF_INET;
  serv_addr.sin_addr.s_addr=inet_addr("192.168.19.141");//mh ip
  serv_addr.sin_port=htons(PORTNUM);

  if(connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr))==1)
    error_handling("connect() error!"); 

  /*�곕젅�� �앹꽦 諛� join*/
  pthread_create(&snd_thread,&attr, send_msg, (void*)&sock);
  pthread_create(&rcv_thread,&attr, recv_msg, (void*)&sock);
  pthread_join(snd_thread, &thread_return);
  pthread_join(rcv_thread, &thread_return);

  pthread_attr_destroy(&attr);
  pthread_mutex_destroy(&rw_mutex);
  pthread_cond_destroy(&rw_threadshold_cv);
  pthread_exit (NULL);
  close(sock);
  return 0;
}

void* send_msg(void* arg) //send thread main
{
  int sock=*((int*)arg);
  //  char name_msg[NAME_SIZE+BUF_SIZE];
  char msg[BUF_SIZE]; //mh
  char name[NAME_SIZE]; //mh
  
  pthread_mutex_lock(&rw_mutex);
  //strcpy(name,"mina");
  fprintf(stderr,"Plz put the name : ");//�ъ슜�� �대쫫�낅젰諛쏆쓬
  fgets(name,NAME_SIZE,stdin);
  
  send(sock,name,sizeof(name),0);//�대쫫�� �쒕쾭�� 蹂대궡硫� 寃쎈ℓ李멸��좎껌
  name[strlen(name)-1]='\0';
  fprintf(stderr,"\nEnter the Price : ");
  fgets(msg, BUF_SIZE, stdin);//�ъ슜�먯뿉寃� �낆같媛�  �낅젰�� 諛쏆쓬
  if(!strcmp(msg,"q\n")||!strcmp(msg,"Q\n"))//q ,Q �낅젰 �� socket�� �リ퀬 梨꾪똿 醫낅즺
    {
      close(sock);
      exit(0);
    }
      
  msg[strlen(msg)-1]='\0';
  send(sock, msg, sizeof(msg),0);
  

    while(1)
      {
	pthread_cond_wait(&rw_threadshold_cv, &rw_mutex);    
	fprintf(stderr,"\nEnter the Price : ");
	fgets(msg, BUF_SIZE, stdin);//�ъ슜�먯뿉寃� �낆같媛�  �낅젰�� 諛쏆쓬

      if(!strcmp(msg,"q\n")||!strcmp(msg,"Q\n"))//q ,Q �낅젰 �� socket�� �リ퀬 梨꾪똿 醫낅즺
	{
	  close(sock);
	  exit(0);
	}
      
      //  sprintf(name_msg, "[%s] %s", name, msg);//[ �대쫫] 梨꾪똿�댁슜
      msg[strlen(msg)-1]='\0';
      send(sock, msg, sizeof(msg),0);//�낅젰�� �쒕쾭�먭쾶 蹂대깂 
      //  name_msg[0]='\0';

      pthread_mutex_unlock(&rw_mutex);
      memset(msg,'\0',sizeof(msg)); 
      usleep(2);
      }
  pthread_exit (NULL);
  return NULL;

}

void* recv_msg(void* arg) //recv thread�� main
{
  int sock=*((int*)arg);
  char name_msg[NAME_SIZE+BUF_SIZE];
  int len;

  while(1){
    sleep(1);
    pthread_mutex_lock(&rw_mutex);
    len=recv(sock, name_msg,sizeof(name_msg),0);
    if(len==-1)//�ㅻ쪟媛� �덈떎硫�
	return (void*)-1;
    else
      while(len==0){recv(sock, name_msg,sizeof(name_msg),0);}
    fprintf(stderr,name_msg,len);//異쒕젰
    name_msg[0]='\0';
    pthread_cond_signal(&rw_threadshold_cv);
    pthread_mutex_unlock(&rw_mutex);
  }
  pthread_exit (NULL);
  return NULL;
}

void error_handling(char* msg)
{
  printf("%s",msg);
  exit(1);
}
